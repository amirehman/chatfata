"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    userbyname(username: ID @eq): User @find

    recipes(status: String @eq): [Recipe]
        @where(status: "like")
        @paginate(defaultCount: 12)
    recipe(slug: ID @eq): Recipe @find
    isRecipePublished(slug: ID @eq): Recipe @find

    stepsByRecipe(
        recipe_id: Int @eq
        orderBy: [OrderByClause!] @orderBy
    ): [Preparation] @where(recipe_id: "like") @all

    recipeIngredientsByRecipe(
        recipe_id: Int @eq
        orderBy: [OrderByClause!] @orderBy
    ): [Recipeingredient] @where(recipe_id: "like") @all

    categories(category: Boolean! @eq): [Ingredient] @paginate(defaultCount: 12)
    GetFeaturedCategoriesRandomly: [Ingredient]

    GetAllPreparationsByRecipe(id: Int!): [Preparation]
    GetAllIngredientsByRecipe(id: Int!): [Recipeingredient]


    GetAllIngredientsSorted: [Recipeingredient]
    ingredients: [Ingredient] @all
    ingredient(slug: ID @eq): Ingredient @find

    SearchRecipes(term: String): [Recipe]

    me: User @middleware(check: ["auth:api"]) @auth

    meals: [Meal!]! @all

    countries: [Country!]! @all
    country(id: ID @eq): Country @find
    states(country_id: Int @eq): [State]
        @where(country_id: "like")
        @all
}

type Mutation {
    # createUser(
    #    name: String @rules(apply: ["required"])
    #    email: String @rules(apply: ["required", "email", "unique:users,email"])
    # ): User @create(model: "App\\User")

    # updateUser(
    #     id: ID @rules(apply: ["required"])
    #     name: String
    #     email: String @rules(apply: ["email"])
    # ): User @update(model: "App\\User")

    # deleteUser(
    #     id: ID @rules(apply: ["required"])
    # ): User @delete(model: "App\\User")

    createPreparations(
        step: String! @rules(apply: ["required"])
        recipe_id: Int! @rules(apply: ["required"])
        author_id: Int! @rules(apply: ["required"])
        order: Int
    ): Preparation @create

    updatePreparations(
        id: ID @rules(apply: ["required"])
        step: String! @rules(apply: ["required"])
        recipe_id: Int! @rules(apply: ["required"])
        author_id: Int! @rules(apply: ["required"])
    ): Preparation @update

    deletePreparations(id: ID! @rules(apply: ["required"])): Preparation @delete

    ######    Recipeingredient   ######

    createRecipeingredients(
        amount: String! @rules(apply: ["required"])
        note: String
        ingredient_id: Int! @rules(apply: ["required"])
        recipe_id: Int! @rules(apply: ["required"])
        author_id: Int! @rules(apply: ["required"])
        order: Int
    ): Recipeingredient @create

    updateRecipeingredients(
        id: ID @rules(apply: ["required"])
        amount: String! @rules(apply: ["required"])
        note: String
        ingredient_id: Int! @rules(apply: ["required"])
        recipe_id: Int! @rules(apply: ["required"])
        author_id: Int! @rules(apply: ["required"])
        order: Int
    ): Recipeingredient @update

    deleteRecipeingredients(
        id: ID! @rules(apply: ["required"])
    ): Recipeingredient @delete
}

type User {
    id: ID!
    name: String!
    email: String!
    username: String!
    avatar: String
    email_verified_at: String
    created_at: DateTime!
    updated_at: DateTime!
    info: UserInfo @hasOne
    application: ChannelApplication @hasOne
    recipes: [Recipe] @belongsToMany
    allrecipes: [Recipe] @belongsToMany
    draftrecipes: [Recipe] @belongsToMany
    roles: [Role] @hasMany
    social: [UserSocialmedia] @belongsToMany
}

type ChannelApplication {
    status: String!
    channel_type: Int!
    channel_url: String!
    created_at: String
    user: User @belongsTo
}

type UserInfo {
    id: ID!
    about: String!
    youtube: String!
    user: User @belongsTo
}

type Role {
    id: ID!
    name: String!
    user: [User] @belongsToMany
}

type UserSocialmedia {
    id: ID!
    link: String!
    user: [User] @hasOne
    media: Socialmedia @belongsTo
}

type Socialmedia {
    id: ID!
    name: String!
    icon: String!
    usersocialmedia: UserSocialmedia @belongsTo
}

type Ingredient {
    id: ID!
    title: String!
    slug: String!
    excerpt: String
    body: String
    image: String
    category: Boolean
    recipes: [Recipe] @belongsToMany
}

type Meal {
    id: ID!
    title: String!
    slug: String
    image: String
    recipes: [Recipe] @belongsToMany
}

type Recipe {
    id: ID!
    title: String!
    slug: String!
    excerpt: String
    body: String
    difficulty: String!
    prep_time: String
    serves: String
    image: String
    video: String
    ingredient_note: String
    seo_title: String
    meta_description: String
    meta_keywords: String
    status: String
    featured: Boolean
    order: Int
    created_at: String
    image: String!
    images: [Media] @hasMany
    meals: [Meal] @belongsToMany
    categories: [Ingredient] @belongsToMany
    author: User @belongsTo
    steps: [Preparation] @hasMany
    ingredients: [Recipeingredient] @hasMany
    notes: [Recipeingredientnote] @hasMany
    country: [Country] @belongsTo
    state: [State] @belongsTo
}

type Media {
    id: ID!
    name: String
    file: String!
    mime_type: String
    mime_type: String
    recipe_id: Int
    user: User @belongsTo
    recipe: User @belongsTo
    user_id: Int!
    status: Int
    order: Int
    created_at: String
    updated_at: String
}

type Recipeingredient {
    id: ID!
    amount: String!
    note: String
    type: String
    order: Int
    recipe_id: Int
    recipe: Recipe @belongsTo
    ingredient: Ingredient @belongsTo
}

type Recipeingredientnote {
    id: ID!
    title: String
    body: String!
}

type Preparation {
    id: Int!
    step: String!
    type: String!
    order: Int
    recipe_id: Int
    recipe: Recipe @belongsTo
}

type Country {
    id: Int!
    name: String!
    iso3: String
    iso2: String
    native: String
    emoji: String
    states: [State] @hasMany
    recipes: [Recipe] @belongsTo
}

type State {
    id: Int
    name: String
    iso2: String
    country_code: String
    country_id: Int
    country: Country @belongsTo
    recipes: [Recipe] @belongsTo
}

input OrderByClause {
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}
